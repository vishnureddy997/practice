Resources:
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0b7dcd6e6fd797935 # ImageID valid only in us-east-1 region
      InstanceType: t2.micro
      KeyName: sydney # <-- Change to use your key-pair name
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup03
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          set -o nounset
          set -o errexit

          BASE="/opt/provisioner"
          mkdir -p "$BASE"

          install_basics() {
            yum update -y
            yum install -y python3 tar unzip
            # on Amazon Linux 2, python2 is default, so we need
            # to install python3 packages in virtualenv instead
            # of globally (prevents conflicts)
            # clean up older virtual environments if they exist
            rm -rf "$BASE/venv"
            # make python3 virtualenv
            python3 -m venv "$BASE/venv"
            # use pip inside that virtualenv to install boto3 & awscli
            "$BASE/venv/bin/pip" install --no-input boto3
            "$BASE/venv/bin/pip" install --no-input awscli
            # print the virtual environment's python's version
            "$BASE/venv/bin/python" --version
          }

          init_cfn_tools() {
            yum update -y aws-cfn-bootstrap
          }

          install_basics
          init_cfn_tools
          #
          # beyond this point, we can start using CloudFormation tools
          #
          export PATH="$PATH:/usr/local/bin:/opt/aws/bin:$BASE/bin"

          cf_signal() {
            cfn-signal -e "$1" \
              --stack "${AWS::StackName}" \
              --resource "ControlVM" \
              --region "${AWS::Region}"
          }

          cf_abort() {
            cf_signal 1
          }

          cf_initialize() {
            cfn-init -v \
              --stack "${AWS::StackName}" \
              --resource "ControlVM" \
              --configsets "Provision" \
              --region "${AWS::Region}"
          }

          trap 'cf_abort $LINENO' ERR

          cf_initialize || cf_abort
          cf_signal 0
  WebAppSecurityGroup03:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, dev1]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0